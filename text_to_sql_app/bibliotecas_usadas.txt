[200~fastapi:

O que √©: √â o framework web.

Para que serve: √â a ferramenta principal que usamos para construir a API (o "servidor"). Ele permite criar os endpoints (como o /query) que recebem requisi√ß√µes (a pergunta do usu√°rio) e enviam respostas (o resultado da consulta). √â conhecido por ser extremamente r√°pido.

uvicorn[standard]:

O que √©: √â o servidor (ASGI server).

Para que serve: O FastAPI define o que a API faz, mas o uvicorn √© quem de fato a executa. Ele √© o "motor" que fica ouvindo por conex√µes na porta 8000 e passa as requisi√ß√µes para o FastAPI processar. O [standard] instala algumas depend√™ncias extras que o tornam mais r√°pido e eficiente.

sqlalchemy:

O que √©: √â um "ORM" (Mapeador Objeto-Relacional) para SQL.

Para que serve: √â a ponte entre o Python e o banco de dados SQLite. Em vez de lidar diretamente com a conex√£o do banco, n√≥s usamos o SQLAlchemy para:

Criar a "engine" de conex√£o (create_engine).

Executar as queries SQL (session.execute) de forma segura.

Inspecionar o banco para descobrir o esquema (inspect).

google-generativeai:

O que √©: √â a biblioteca cliente oficial do Google.

Para que serve: √â ela que permite que nosso c√≥digo Python se comunique com a API do Gemini. N√≥s a usamos para enviar o prompt (pergunta + esquema do banco) e receber de volta o JSON com a query SQL gerada.

pydantic:

O que √©: √â uma biblioteca de valida√ß√£o de dados.

Para que serve: O FastAPI a utiliza "por baixo dos panos" para garantir que os dados que chegam na nossa API est√£o no formato correto. Quando definimos class NLRequest(BaseModel): question: str, o Pydantic automaticamente verifica se o JSON recebido tem uma chave chamada "question" e se o valor dela √© uma string.

python-dotenv:

O que √©: √â um utilit√°rio.

