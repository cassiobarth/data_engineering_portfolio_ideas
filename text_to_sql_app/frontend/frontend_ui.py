import streamlit as st
import requests
import os

# --- AVISO DE INICIALIZA√á√ÉO (NOVO) ---
# Este comando 'toast' mostra um aviso popup r√°pido assim que a p√°gina carrega.
st.toast("Este √© um app gratuito e pode demorar at√© 60s para 'acordar' no primeiro acesso. Obrigado pela paci√™ncia! üöÄ", icon="‚è±Ô∏è")
# -------------------------------------

# Procura pela URL online no ambiente, se n√£o achar, usa a URL local
# (Esta √© a mudan√ßa que fizemos antes para o Render)
API_URL = os.getenv("API_URL", "http://text2sql-api:8000/query")


# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Chat com Banco de Dados",
    page_icon="üí¨"
)

st.title("Chat com seu Banco de Dados üí¨")
st.write("Fa√ßa uma pergunta em portugu√™s sobre os dados e a IA ir√° traduzir e executar o SQL.")

# --- Interface ---
with st.form(key="query_form"):
    # Input da pergunta
    question = st.text_input(
        "Sua pergunta:",
        placeholder="Ex: Quantos clientes temos do Brasil?"
    )
    
    # Bot√£o de Enviar
    submit_button = st.form_submit_button(label="Perguntar")

# --- L√≥gica de Backend ---
if submit_button and question:
    # Mostra um spinner ENQUANTO a API (que tamb√©m pode estar "dormindo") acorda
    with st.spinner("Conectando aos servidores... üß†"):
        try:
            # 1. Envia a pergunta para a API FastAPI
            response = requests.post(API_URL, json={"question": question})

            # 2. Trata a resposta
            if response.status_code == 200:
                data = response.json()
                
                # Exibe a query SQL gerada
                st.subheader("Query SQL Gerada:")
                st.code(data['sql'], language='sql')
                
                # Exibe o resultado (em uma tabela)
                st.subheader("Resultado:")
                st.dataframe(data['result'])
                
            else:
                # Mostra o erro da API (ex: 404, 400, etc.)
                st.error(f"Erro da API (C√≥digo {response.status_code}):")
                st.json(response.json())

        except requests.exceptions.ConnectionError:
            st.error("Erro de Conex√£o: N√£o foi poss√≠vel conectar √† API.")
            st.write(f"Verifique se o servi√ßo da API ({API_URL}) est√° acess√≠vel.")
        except Exception as e:
            st.error(f"Ocorreu um erro inesperado: {e}")